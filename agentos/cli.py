import click
from datetime import datetime
import mlflow.projects
from pathlib import Path
from sys import stdin

info_dir = Path("./.agentos")

agent_instances_file = info_dir / "agent_instances.txt"
agent_instances_content = \
"""{file_header}
# AgentOS uses MLflow for tracking data about agent instances.
# Use `mlflow ui` from inside this agent directory to start the MLflow UI
# and, if necessary, filter for the tag 'agent_instance'.
#
# Each time an instance of this agent is launched as a background process
# via the agentos CLI, the PID of the process is appended below, one per
# line. If there are no lines below, this agent has not successfully been
# started as a background process via the CLI.

"""

conda_env_file = Path("./conda_env.yaml")
conda_env_content = \
"""{file_header}

name: {name}

dependencies
    - pip
    - pip: 
      - agentos
"""

mlflow_project_file = Path("./MLProject")
mlflow_project_content = \
"""{file_header}

name: {name}

conda_env: {conda_env}

entry_points:
  start:
    command: "agentos start"
  stop:
    command: "agentos stop"
"""

all_agent_files = {agent_instances_file: agent_instances_content,
                   conda_env_file: conda_env_content,
                   mlflow_project_file: mlflow_project_content}


@click.group()
def agentos_cmd():
    pass


@agentos_cmd.command()
@click.option("--name", "-n", metavar="NAME", default="new_agent",
              help="Name of this agent. This is also the name of "
                   "this agent's MLflow Project and Conda env."
                   "May not contain ' ', ':', or '/'.")
def init(name):
    """Initialize a new agent in this directory."""
    if info_dir.exists():
        print("An agent has already been initialized in this directory.\n"
              "Re-initializing will delete and replace the following files:\n" +
              "\n".join([str(f) for f in all_agent_files.keys()]) + "\n\n" +
              "Are you sure you want to proceed? y/[n]?")
        response = stdin.readline()
        if response.lower() not in ["y\n", "yes\n"]:
            print(response.lower())
            print("init aborted!")
    else:
        info_dir.mkdir(exist_ok=True)

    for file, content in all_agent_files.items():
        f = open(file, "w")
        now = datetime.now().strftime("%b %d, %Y %H:%M:%S")
        header = f"# This file was auto-generated by `agentos init` on {now}."
        f.write(content.format(name=name,
                               conda_env=conda_env_file.name,
                               file_header=header))
        f.flush()
    click.echo(f"Finished initializing agent '{name}' in current working directory.")


@agentos_cmd.command()
def start():
    """Main entry point from CLI via `agentos start`. Runs agent as MLflow project."""
    # We use MLflow because it takes care of setting up the conda env and logging
    # useful info about this run of the agent (start time, etc.). It also makes it
    # easy for somebody else to run our agent.
    mlflow.projects.run(".", entry_point="main")
    click.echo(f"Started agent as a background process with pid {bg_proc.pid}."
                "MLflow was used to start agent via: `mlflow run`")

@agentos_cmd.command()
def stop():
    """Stops the agent."""
    click.echo("Stopping the agent.")
    global agent_instance
    agent_instance.stop()


if __name__ == "__main__":
    agentos_cmd()

