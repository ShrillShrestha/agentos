import agentos.server
import click
from datetime import datetime
import mlflow.projects
import os
from pathlib import Path
import requests
import signal
from sys import stdin
import time
import yaml

DOT_DIR = Path("./.agentos")
AGENT_MGR_INSTANCES = DOT_DIR / "agent_mgr_instances.yaml"
AGENT_MGR_CONTENT = \
"""{file_header}
# Each time a new instance of this agent is created by AgentOS (e.g., via
# the agentos CLI) using this AgentManager Directory, information about the AgentManager 
# process, including its PID is appended below. If there are no
# lines below, no AgentManager Instance has been successfully been started 
# out of this AgentManager Directory.

"""
BUILDFILE_FILE = "agentos_buildfile.yaml"
BUILDFILE_CONTENT = \
    """{file_header}
    # Use this file to Add agents and environments to your AgentOS.
    # See the AgentOS documentation for details.
    # For example, to add a simple agent, uncomment the following:
    #
    # env create:
    #   name: cartpole
    #   package-module: gym.envs.classic_control
    #   class: CartPoleEnv
    # 
    # agent create:
    #   package-module: agentos.agents
    #   class: RandomAgent
    #   env-name: cartpole
    
    """
CONDA_ENV_FILE = Path("./conda_env.yaml")
CONDA_ENV_CONTENT = \
"""{file_header}

name: {name}

dependencies
    - pip
    - pip: 
      - agentos
"""
MLFLOW_PROJECT_FILE = Path("./MLProject")
MLFLOW_PROJECT_CONTENT = \
"""{file_header}

name: {name}

conda_env: {conda_env}

entry_points:
  main:
    command: "agentos start"
"""
ALL_AGENT_FILES = {AGENT_MGR_INSTANCES: AGENT_MGR_CONTENT,
                   CONDA_ENV_FILE: CONDA_ENV_CONTENT,
                   MLFLOW_PROJECT_FILE: MLFLOW_PROJECT_CONTENT}


def agent_running(host, port):
    try:
        r = requests.get(f"http://{host}:{port}/health")
        if r.status_code == 200:
            return True
    except requests.exceptions.ConnectionError:
        pass
    return False


def get_agent_info(warn_if_none=True):
    """Return info dict about most recent agent proc if it exists, else None."""
    try:
        with open(AGENT_MGR_INSTANCES, "r") as f:
            agent_infos = yaml.safe_load(f.read())
            if len(agent_infos) > 0:
                return agent_infos[-1]
            if warn_if_none:
                click.echo("No agent instances history found in "
                           f"{AGENT_MGR_INSTANCES}. Perhaps agent "
                           "was never started, or that file was edited.")
            return None
    except FileNotFoundError:
        if warn_if_none:
            click.echo("No agent manager history found in "
                       f"{AGENT_MGR_INSTANCES}. Perhaps agent "
                       "was never started, or that file was edited.")


@click.group()
def agentos_cmd():
    pass

@agentos_cmd.group()
def dir():
    """
    Commands to work with a given directory (by default,
    the current working directory) as an AgentOS Directory,
    which is what the AgentOS Server and CLI use for
    various state, logs, etc.
    """
    pass


def validate_agent_name(ctx, param, value):
    if ' ' in value or ':' in value or '/' in value:
        raise click.BadParameter("name may not contain ' ', ':', or '/'.")
    return value


@dir.command()
@click.option("--name", "-n", metavar="AGENTOS_NAME", default="new_agentos",
              callback=validate_agent_name,
              help="Name of this agentOS. This is also the name of "
                   "this agentOS's MLflow Project and Conda env. "
                   "AGENTOS_NAME may not contain ' ', ':', or '/'.")
@click.option("--dot_dir", "-d", metavar="DOT_DIR", default=DOT_DIR,
              help="Directory where agent-specific files live. "
                   "These files typically should not live in "
                   f"version control. Default is {DOT_DIR}")
def init(name, agentos_dir):
    """
    Initialize current directory as an AgentOS Directory.
    This creates everything necessary to run an AgentOS
    Server that uses this directory for its configuration
    and its state.
    """
    if DOT_DIR.exists():
        print("An AgentOS has already been initialized in this directory.\n"
              "Re-initializing will delete and replace the following files:\n" +
              "\n".join([str(f) for f in ALL_AGENT_FILES.keys()]) + "\n\n" +
              "Are you sure you want to proceed? y/[n]")
        response = stdin.readline()
        if response.lower() not in ["y\n", "yes\n"]:
            print(response.lower())
            print("init aborted!")
    else:
        agentos_dir.mkdir(exist_ok=True)

    for file, content in ALL_AGENT_FILES.items():
        f = open(file, "w")
        now = datetime.now().strftime("%b %d, %Y %H:%M:%S")
        header = f"# This file was auto-generated by `agentos init` on {now}."
        f.write(content.format(name=name,
                               conda_env=CONDA_ENV_FILE.name,
                               file_header=header))
        f.flush()
    click.echo(f"Finished initializing AgentOS '{name}' in current working directory.")


@agentos_cmd.group()
@click.option("--host", "-h", default="127.0.0.1",
              help="The network address to listen on (default: 127.0.0.1). "
                   "Use 0.0.0.0 to bind to all addresses if you want to interact "
                   "with the agent from other machines.")
@click.option("--port", "-p", default=8002,
              help="The port to listen on (default: 8002).")
@click.pass_context
def server(ctx, host, port):
    """
    The server command provides sub-commands to start, stop,
    or otherwise interact with an AgentOS server.
    """
    ctx.ensure_object(dict)
    ctx.obj['host'] = host
    ctx.obj['port'] = port


@server.command()
@click.option("--daemon/--no-daemon", "-d/-n", default=True,
              help="Whether to run as a background (\"daemon\") process. "
                   "Default is to run as daemon."
                   "When --no-daemon is passed, the server is started as a "
                   "foreground blocking process and stream the stdin "
                   "and stdout from the agent.")
@click.pass_context
def start(ctx, daemon):
    """Start the AgentOS Server."""
    host, port = ctx.obj["host"], ctx.obj["port"]
    agent_info = get_agent_info(warn_if_none=False)
    if agent_info:
        if agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"AgentOS Server already running with pid "
                       f"{agent_info['pid']} at "
                       f"{agent_info['host']}:{agent_info['port']}.")
            return
    proc = agentos.server.start(host, port, daemon=daemon)
    health_check_timer = 10
    for i in range(health_check_timer):
        if agent_running(host, port):
            with open(AGENT_MGR_INSTANCES, "a+") as f:
                f.write('- {pid: %s, host: %s, port: %s}\n' % (proc.pid, host, port))
            return
        time.sleep(1)
    click.echo("AgentOS health check failed after starting with pid "
               f"{proc.pid}. Giving up after {health_check_timer} "
               "seconds, and leaving AgentManager in unknown state.")


@server.command()
def start_with_mlflow():
    """Main entry point from CLI via `agentos start`. Runs agent as MLflow project."""
    # We use MLflow because it takes care of setting up the conda env and logging
    # useful info about this run of the agent (start time, etc.). It also makes it
    # easy for somebody else to run our agent.
    mlflow.projects.run(".")


@server.command()
@click.option("--force", "-f", default=False, is_flag=True,
              help="Don't confirmation with user before stopping agent.")
def stop(force):
    """Stops the agentOS."""
    agent_info = get_agent_info()
    if agent_info:
        if not agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"No AgentOS Server to stop. Most recent server "
                       f"for this AgentOS Directory was run with "
                       f"pid {agent_info['pid']} "
                       f"at {agent_info['host']}:{agent_info['port']}.")
            return
        response = "y\n"
        if not force:
            click.echo(f"Stopping this AgentOS Server (with "
                       f"pid {agent_info['pid']} on "
                       f"{agent_info['host']}:{agent_info['port']}) may cause "
                       "state loss.\nAre you sure you want to proceed? y/[n]")
            response = stdin.readline()
        if response.lower() in ["y\n", "yes\n"]:
            os.kill(agent_info['pid'], signal.SIGTERM)
            click.echo("Sent SIGTERM to AgentOS Server process with pid " 
                       f"{agent_info['pid']} on "
                       f"{agent_info['host']}:{agent_info['port']}.")
        else:
            click.echo("Aborted. AgentManager not stopped.")


@server.command()
def status():
    """Prints status of AgentManager in current directory."""
    agent_info = get_agent_info(warn_if_none=False)
    if agent_info:
        if agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"AgentOS Server running with pid {agent_info['pid']} "
                       f"on {agent_info['host']}:{agent_info['port']}.")
        else:
            click.echo(f"AgentOS Server not running. Last run " 
                       f"with pid {agent_info['pid']} "
                       f"on {agent_info['host']}:{agent_info['port']}.")
    else:
        click.echo(f"AgentManager not running. Or at least no run history was "
                   f"found in {AGENT_MGR_INSTANCES}.")


if __name__ == "__main__":
    agentos_cmd()

