"""AgentOS command line interface (CLI).

The CLI allows creation of a simple template agent.
"""
import click
from datetime import datetime
import mlflow.projects
from pathlib import Path
from subprocess import Popen


CONDA_ENV_FILE = Path("./conda_env.yaml")
CONDA_ENV_CONTENT = \
"""{file_header}

name: {name}

dependencies:
    - pip
    - pip: 
      - -e path/to/agentos/git/repo
      # ...or once we are in PyPi:
      #- agentos
      - gym
"""
MLFLOW_PROJECT_FILE = Path("./MLProject")
MLFLOW_PROJECT_CONTENT = \
"""{file_header}

name: {name}

conda_env: {conda_env}

entry_points:
  main:
    command: "python main.py"
"""
AGENT_MAIN_FILE = Path("./main.py")
AGENT_MAIN = \
"""{file_header}
import agentos
import random
import gym

# TODO: REPLACE THE EXAMPLE CODE BELOW WITH YOUR OWN!

# A minimal 1D hallway env class.
class MyEnv(gym.Env):
    def __init__(self):
        super().__init__()
        self.l_r_pos = 0  # left is neg, right is pos.
        
    def reset(self):
        self.l_r_pos = 0
        return 0
    
    def step(self, action):
        self.l_r_pos += action
        return self.l_r_pos, abs(self.l_r_pos), False, dict()
        

# A minimal example agent class.
class MyAgent(agentos.Agent):
    def __init__(self, env_class, num_steps=10):
        super().__init__(env_class)
        self.num_steps = num_steps
        self.step_count = 0
    
    def step(self):
        if self.step_count < self.num_steps:
            print("Taking step " + str(self.step_count))
            self.step_count += 1
            pos_in_env, _, _, _ = self.env.step(random.choice([-1,1]))
            print("Position in env is now: " + str(pos_in_env))
        return self.step_count >= self.num_steps


if __name__ == "__main__":
    agentos.run_agent(MyAgent, MyEnv)
"""
ALL_AGENT_FILES = {CONDA_ENV_FILE: CONDA_ENV_CONTENT,
                   MLFLOW_PROJECT_FILE: MLFLOW_PROJECT_CONTENT,
                   AGENT_MAIN_FILE: AGENT_MAIN}


@click.group()
def agentos_cmd():
    pass


def validate_agent_name(ctx, param, value):
    if ' ' in value or ':' in value or '/' in value:
        raise click.BadParameter("name may not contain ' ', ':', or '/'.")
    return value


@agentos_cmd.command()
@click.option("--name", "-n", metavar="AGENTOS_NAME", default="new_agentos",
              callback=validate_agent_name,
              help="Name of this agentOS. This is also the name of "
                   "this agentOS's MLflow Project and Conda env. "
                   "AGENTOS_NAME may not contain ' ', ':', or '/'.")
def init(name):
    """Initialize current directory as an AgentOS Agent.

    This creates an agent main.py file, a conda env, and an MLflow project file.
    """
    for file, content in ALL_AGENT_FILES.items():
        f = open(file, "w")
        now = datetime.now().strftime("%b %d, %Y %H:%M:%S")
        header = f"# This file was auto-generated by `agentos init` on {now}."
        f.write(content.format(name=name,
                               conda_env=CONDA_ENV_FILE.name,
                               file_header=header))
        f.flush()
    click.echo(f"Finished initializing AgentOS '{name}' in current working directory.")


@agentos_cmd.command()
def run():
    """ Use MLflow for dependency management."""
    mlflow.projects.run(".")


if __name__ == "__main__":
    agentos_cmd()

