from agentos.server import run_agent_server
import click
from datetime import datetime
import mlflow.projects
import os
from pathlib import Path
import requests
import signal
from sys import stdin
import time
import yaml

AGENTOS_DIR = Path("./.agentos")
AGENT_INSTANCES_FILE = AGENTOS_DIR / "agent_instances.yaml"
AGENT_INSTANCES_CONTENT = \
"""{file_header}
# Each time a new instance of this agent is created by AgentOS (e.g., via
# the agentos CLI) using this AgentManager Directory, information about the AgentManager 
# process, including its PID is appended below. If there are no
# lines below, no AgentManager Instance has been successfully been started 
# out of this AgentManager Directory.

"""
AGENT_BUILDFILE_FILE = "agent_buildfile.yaml"
AGENT_BUILDFILE_CONTENT = \
    """{file_header}
    # Use this file to Add agents and environments to your AgentOS.
    # See the AgentOS documentation for details.
    # For example, to add a simple agent, uncomment the following:
    #
    # env create:
    #   name: cartpole
    #   package-module: gym.envs.classic_control
    #   class: CartPoleEnv
    # 
    # agent create:
    #   package-module: agentos.agents
    #   class: RandomAgent
    #   env-name: cartpole
    
    """
CONDA_ENV_FILE = Path("./conda_env.yaml")
CONDA_ENV_CONTENT = \
"""{file_header}

name: {name}

dependencies
    - pip
    - pip: 
      - agentos
"""
MLFLOW_PROJECT_FILE = Path("./MLProject")
MLFLOW_PROJECT_CONTENT = \
"""{file_header}

name: {name}

conda_env: {conda_env}

entry_points:
  main:
    command: "agentos start"
"""
ALL_AGENT_FILES = {AGENT_INSTANCES_FILE: AGENT_INSTANCES_CONTENT,
                   CONDA_ENV_FILE: CONDA_ENV_CONTENT,
                   MLFLOW_PROJECT_FILE: MLFLOW_PROJECT_CONTENT}


def agent_running(host, port):
    try:
        r = requests.get(f"http://{host}:{port}/health")
        if r.status_code == 200:
            return True
    except requests.exceptions.ConnectionError:
        pass
    return False


def get_agent_info(warn_if_none=True):
    """Return info dict about most recent agent proc if it exists, else None."""
    with open(AGENT_INSTANCES_FILE, "r") as f:
        agent_infos = yaml.safe_load(f.read())
        if len(agent_infos) > 0:
            return agent_infos[-1]
        if warn_if_none:
            click.echo("No agent instances history found in "
                       f"{AGENT_INSTANCES_FILE}. Perhaps agent "
                       "was never started, or that file was edited.")
        return None


@click.group()
def agentos_cmd():
    pass


def validate_agent_name(ctx, param, value):
    if ' ' in value or ':' in value or '/' in value:
        raise click.BadParameter("name may not contain ' ', ':', or '/'.")


@agentos_cmd.command()
@click.option("--name", "-n", metavar="AGENTOS_NAME", default="new_agentos",
              callback=validate_agent_name,
              help="Name of this agent. This is also the name of "
                   "this agentOS's MLflow Project and Conda env. "
                   "AGENTOS_NAME may not contain ' ', ':', or '/'.")
@click.option("--agentos_dir", "-a", metavar="DIR", default=AGENTOS_DIR,
              help="Directory where agent-specific files live. "
                   "These files typically should not live in "
                   "version control.")
def init(name, agentos_dir):
    """Initialize a new AgentOS in this directory."""
    if AGENTOS_DIR.exists():
        print("An AgentOS has already been initialized in this directory.\n"
              "Re-initializing will delete and replace the following files:\n" +
              "\n".join([str(f) for f in ALL_AGENT_FILES.keys()]) + "\n\n" +
              "Are you sure you want to proceed? y/[n]")
        response = stdin.readline()
        if response.lower() not in ["y\n", "yes\n"]:
            print(response.lower())
            print("init aborted!")
    else:
        agentos_dir.mkdir(exist_ok=True)

    for file, content in ALL_AGENT_FILES.items():
        f = open(file, "w")
        now = datetime.now().strftime("%b %d, %Y %H:%M:%S")
        header = f"# This file was auto-generated by `agentos init` on {now}."
        f.write(content.format(name=name,
                               conda_env=CONDA_ENV_FILE.name,
                               file_header=header))
        f.flush()
    click.echo(f"Finished initializing AgentOS '{name}' in current working directory.")


@agentos_cmd.command()
@click.option("--host", "-h", default="127.0.0.1",
              help="The network address to listen on (default: 127.0.0.1). "
                   "Use 0.0.0.0 to bind to all addresses if you want to interact "
                   "with the agent from other machines.")
@click.option("--port", "-p", default=8002,
              help="The port to listen on (default: 8002).")
@click.option("--no_daemon", "-n", is_flag=True,
              help="Don't run as a background (\"daemon\") process. Instead run "
                   "this as a foreground blocking process and stream the stdin "
                   "and stdout from the agent.")
def start(host, port, no_daemon):
    """Start agent service as background process. Log to `agent_instances_file`."""
    agent_info = get_agent_info(warn_if_none=False)
    if agent_info:
        if agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"AgentManager already running with pid {agent_info['pid']} "
                       f"on {agent_info['host']}:{agent_info['port']}.\n"
                       "Aborting.")
            return
    proc = run_agent_server(host, port, no_daemon)
    health_check_timer = 10
    for i in range(health_check_timer):
        if agent_running(host, port):
            with open(AGENT_INSTANCES_FILE, "a+") as f:
                f.write('- {pid: %s, host: %s, port: %s}\n' % (proc.pid, host, port))
            return
        time.sleep(1)
    click.echo("AgentOS health check failed after starting with pid "
               f"{proc.pid}. Giving up after {health_check_timer} "
               "seconds, and leaving AgentManager in unknown state.")


@agentos_cmd.command()
def start_with_mlflow():
    """Main entry point from CLI via `agentos start`. Runs agent as MLflow project."""
    # We use MLflow because it takes care of setting up the conda env and logging
    # useful info about this run of the agent (start time, etc.). It also makes it
    # easy for somebody else to run our agent.
    mlflow.projects.run(".")


@agentos_cmd.command()
def status():
    """Prints status of AgentManager in current directory."""
    agent_info = get_agent_info(warn_if_none=False)
    if agent_info:
        if agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"AgentManager is running with pid {agent_info['pid']} "
                       f"on {agent_info['host']}:{agent_info['port']}.")
        else:
            click.echo(f"AgentManager not running. Last run with pid {agent_info['pid']} " 
                       f"on {agent_info['host']}:{agent_info['port']}.")
    else:
        click.echo(f"AgentManager not running. Or at least no run history was "
                   f"found in {AGENT_INSTANCES_FILE}.")


@agentos_cmd.command()
@click.option("--force", "-f", default=False, is_flag=True,
              help="Don't confirmation with user before stopping agent.")
def stop(force):
    """Stops the agentOS."""
    agent_info = get_agent_info()
    if agent_info:
        if not agent_running(agent_info["host"], agent_info["port"]):
            click.echo(f"Most recent agent (with pid {agent_info['pid']} "
                       f"on {agent_info['host']}:{agent_info['port']}) "
                       "is not currently running.")
            return
        response = "y\n"
        if not force:
            click.echo(f"Stopping this AgentManager (with pid {agent_info['pid']} on "
                       f"{agent_info['host']}:{agent_info['port']}) may cause "
                       "state loss.\nAre you sure you want to proceed? y/[n]")
            response = stdin.readline()
        if response.lower() in ["y\n", "yes\n"]:
            os.kill(agent_info['pid'], signal.SIGTERM)
            click.echo("Sent SIGTERM to AgentManager process with pid " 
                       f"{agent_info['pid']} on "
                       f"{agent_info['host']}:{agent_info['port']}.")
        else:
            click.echo("Aborted. AgentManager not stopped.")


if __name__ == "__main__":
    agentos_cmd()

