"""AgentOS command line interface (CLI).

The CLI allows creation of a simple template agent.
"""
import agentos
import click
from datetime import datetime
import gym
import mlflow.projects
import importlib.util
from pathlib import Path
from subprocess import Popen, PIPE


CONDA_ENV_FILE = Path("./conda_env.yaml")
CONDA_ENV_CONTENT = \
"""{file_header}

name: {name}

dependencies:
    - pip
    - pip: 
      - -e path/to/agentos/git/repo
      # ...or once we are in PyPi:
      #- agentos
      - gym
"""
MLFLOW_PROJECT_FILE = Path("./MLProject")
MLFLOW_PROJECT_CONTENT = \
"""{file_header}

name: {name}

conda_env: {conda_env}

entry_points:
  main:
    command: "python main.py"
"""
AGENT_MAIN_FILE = Path("./main.py")
AGENT_MAIN = \
"""{file_header}
import agentos
import random
import gym

# TODO: REPLACE THE EXAMPLE CODE BELOW WITH YOUR OWN!

# A minimal 1D hallway env class.
class MyEnv(gym.Env):
    def __init__(self):
        super().__init__()
        self.l_r_pos = 0  # left is neg, right is pos.
        
    def reset(self):
        self.l_r_pos = 0
        return 0
    
    def step(self, action):
        self.l_r_pos += action
        return self.l_r_pos, abs(self.l_r_pos), False, dict()
        

# A minimal example agent class.
class MyAgent(agentos.Agent):
    def __init__(self, env_class, num_steps=10):
        super().__init__(env_class)
        self.num_steps = num_steps
        self.step_count = 0
    
    def step(self):
        if self.step_count < self.num_steps:
            print("Taking step " + str(self.step_count))
            self.step_count += 1
            pos_in_env, _, _, _ = self.env.step(random.choice([-1,1]))
            print("Position in env is now: " + str(pos_in_env))
        return self.step_count >= self.num_steps


if __name__ == "__main__":
    agentos.run_agent(MyAgent, MyEnv)
"""
ALL_AGENT_FILES = {CONDA_ENV_FILE: CONDA_ENV_CONTENT,
                   MLFLOW_PROJECT_FILE: MLFLOW_PROJECT_CONTENT,
                   AGENT_MAIN_FILE: AGENT_MAIN}


@click.group()
def agentos_cmd():
    pass


def validate_agent_name(ctx, param, value):
    if ' ' in value or ':' in value or '/' in value:
        raise click.BadParameter("name may not contain ' ', ':', or '/'.")
    return value


@agentos_cmd.command()
@click.option("--name", "-n", metavar="AGENTOS_NAME", default="new_agentos",
              callback=validate_agent_name,
              help="Name of this agentOS. This is also the name of "
                   "this agentOS's MLflow Project and Conda env. "
                   "AGENTOS_NAME may not contain ' ', ':', or '/'.")
def init(name):
    """Initialize current directory as an AgentOS Agent.

    This creates an agent main.py file, a conda env, and an MLflow project file.
    """
    for file, content in ALL_AGENT_FILES.items():
        f = open(file, "w")
        now = datetime.now().strftime("%b %d, %Y %H:%M:%S")
        header = f"# This file was auto-generated by `agentos init` on {now}."
        f.write(content.format(name=name,
                               conda_env=CONDA_ENV_FILE.name,
                               file_header=header))
        f.flush()
    click.echo(f"Finished initializing AgentOS '{name}' in current working directory.")


def _get_subclass_from_file(filename, parent_class):
    """Return first subclass of `parent_class` found in filename, else None."""
    path = Path(filename)
    assert path.is_file(), "Make sure value passed to --py_target is a valid file."
    assert path.suffix == ".py", "Filename must end in .py"

    spec = importlib.util.spec_from_file_location(path.stem, path.absolute())
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    for elt in module.__dict__.values():
        if type(elt) is type and issubclass(elt, parent_class):
            print(f"Found first subclass class {elt}; returning it.")
            return elt


def _handle_single_run_arg(filename):
    # The file must contain >= 1 agentos.Agent subclass and >= 1 gym.Env subclass.
    agent_cls = _get_subclass_from_file(filename, agentos.Agent)
    env_cls = _get_subclass_from_file(filename, gym.Env)
    assert agent_cls and env_cls, \
        f" {filename} must contain >= 1 agentos.Agent subclass " \
        f"and >= 1 gym.Env subclass."
    agentos.run_agent(agent_cls, env_cls)


@agentos_cmd.command()
@click.argument("run_args", nargs=-1, metavar="RUN_ARGS")
def run(run_args):
    """ Run an Agentos Agent (agentos.Agent) with an environment (gym.Env).

    \b
    Arguments:
        RUN_ARGS: 0, 1, or 2 space delimited arguments, parse as follows:

    \b
    If no args are specified:
        - look for file named MLProject in the current working directory and
          if found run this directory as an MLflow project.
        - else, if file with name MLProject not found, look for main.py in
          current working directory and then behave in the same was as if
          1 argument (i.e., main.py) was provided, as described below.
    Else, if 1 arg is specified:
        - if it is a filename, search that file for the first subclass of
          agentos.Agent, as well as first subclass of gym.Env and call
          agentos.RunAgent() passing in the agent and env classes found.
    Else, if 2 args specified:
         - assume the first specifies the agent and second specifies the Env.
           the format for both is the same, as follows:
             - if it is a filename:
                  Look for the first instance of the appropriate subclass
                  (either agentos.Agent or gym.env) in the file and use that
                  as the argument to agentos.run_agent.
              - else:
                  Assume the arg is in the form [package.][module.]classname
                  and that it is available in this python environments path.

    """
    if len(run_args) == 0:
        if MLFLOW_PROJECT_FILE.is_file():
            print(f"Running agent in this dir using MLflow.")
            mlflow.projects.run(".")
            return
        else:
            assert AGENT_MAIN_FILE.is_file(), "No agent main.py file or MLProject file found."
            _handle_single_run_arg(AGENT_MAIN_FILE)
    elif len(run_args) == 1:
        if Path(run_args[0]).is_file():
            _handle_single_run_arg(run_args[0])
        else:
            raise click.UsageError("1 argument was passed to run; it must be "
                                   "a filename and it is not.")
    elif len(run_args) == 2:
        agent_arg, env_arg = run_args[0], run_args[1]
        if Path(agent_arg).is_file():
            agent_cls = _get_subclass_from_file(agent_arg, agentos.Agent)
            assert agent_cls, f"{agent_arg} must contain a subclass of agentos.Agent"
        else:
            ag_mod_name = ".".join(agent_arg.split(".")[:-1])
            ag_cls_name = agent_arg.split(".")[-1]
            ag_mod = importlib.import_module(ag_mod_name)
            agent_cls = getattr(ag_mod, ag_cls_name)
        if Path(env_arg).is_file():
            env_cls = _get_subclass_from_file(env_arg, gym.Env)
            assert env_cls, f"{env_arg} must contain a subclass of gym.Env"
        else:
            env_mod_name = ".".join(env_arg.split(".")[:-1])
            env_cls_name = env_arg.split(".")[-1]
            env_mod = importlib.import_module(env_mod_name)
            env_cls = getattr(env_mod, env_cls_name)
        agentos.run_agent(agent_cls, env_cls)
    else:
        raise click.UsageError("run command can take 0, 1, or 2 arguments.")


if __name__ == "__main__":
    agentos_cmd()

